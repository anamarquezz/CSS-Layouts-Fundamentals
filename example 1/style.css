* { box-sizing: border-box;}

body {
    font: 1.1em/1.3 Tahoma, Verdana, Segoe, sans-serif;
    background-color: #fff;
    color: #333;
    max-width: 960px;
    margin:1em auto;    
}

.item {
    padding: 10px;
    border: 5px solid rgb(17, 105, 121);
    background-color: rgba(17, 105, 121 ,.1);
    border-radius: 5px;
}

.container {
    display:grid;
    grid-template-columns: 150px 150px 300px;
    grid-template-rows: 200px 200px;
    gap:20px;
}

/*Explicit grid {grid that I defined}*/

/*Implicit grid:
    - if don't defined columns or rows in a grid layout
    it would create a implicit tracks, and it would be 
    big enough to fit in the content that has


    Sizing methods: valid unit
     - 15ch roughly 15 characters
     - 20% is going to be a percentage of the grid container
       it can be use in gap: %

    - Autosized tracks is they will stretch by default. 
    it would gt the remaining space
    - Auto is a essentially a kind of intrinsic sizing
    - intrinsic sizing says: I wont this to be big enough to git my content.
    Keys for using in Grid:
        Auto - intrinsic sizing
        min-content: the small as it can possibly be
                If create three tracks of min-content size, 
                The cell that's got a lot of content in it,
                is compressdown, it's got as small as it possibly can do without
                causing any overflow, which means that it's taking
                all of the soft wrapping oppotunities it's got and getting as
                small as it can. But nothing's poking out of the box.
        max-content:
                the cell here that's got a lot of content in,
                it's streched out, and it's gone as long as it can, but no bigger
                it's not like auto, just gone to the size of content.

    Flexbox and Grid:
        to layout the content based on two things:
            - it look what the smalles size or
            biggest size it can be and make decisions about how
            to layout the content on base of those two things.
*/

.container {
    display:grid;
    grid-template-columns: 150px 150px auto;  
    gap:20px;
}

/*min-content the small as it can possibly be*/
.container {
    display:grid;
    grid-template-columns: min-content min-content min-content;
    gap:20px;
}

/*max-content: just gone long to the size of content.*/
.container {
    display:grid;
    grid-template-columns: max-content max-content max-content;
    grid-template-rows: none;
}

/*fit-content --ntrinsic sizing if we pass a value pass it the limitation*/
.container {
    display:grid;
    grid-template-columns: fit-content(10em) fit-content(10em) fit-content(10em); 
    grid-template-rows: none;
}
/*fr unit --
    Is specific for grid layout, defines  fraction of the available space of the container

*/

.container {
    display:grid;
    grid-template-columns: 1fr 1fr 1fr;
    /*grid-template-columns: 100px 1fr 1fr; mix units */
    grid-template-rows: none;
}
/*
Repeat, 
    grid-template-columns: repeat(3, minmax(0,1fr));
    grid-template-columns: repeat(3, 200px 100px);
*/

.container {
    display:grid;
   /* grid-template-columns: minmax(0, 1fr) minmax(0,1fr) minmax(0,1fr); Overflow thext EXample: Threehasmuchmorecontentinilthanalloftheothers*/
    grid-template-columns: repeat(3, minmax(0,1fr));
    grid-template-columns: repeat(3, 200px 100px);
    grid-template-columns: repeat(3, 200px) 100px;
    grid-template-columns: repeat(auto, 200px);
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); /* Responsive */
    grid-template-rows: none;
}




